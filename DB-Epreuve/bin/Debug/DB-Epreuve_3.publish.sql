/*
Deployment script for DB_Epreuve

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB_Epreuve"
:setvar DefaultFilePrefix "DB_Epreuve"
:setvar DefaultDataPath "C:\Users\m.gitton\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\m.gitton\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Categorie]...';


GO
CREATE TABLE [dbo].[Categorie] (
    [Id_Categorie]      INT           IDENTITY (1, 1) NOT NULL,
    [Produit_Categorie] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Categorie] ASC)
);


GO
PRINT N'Creating Table [dbo].[Commande]...';


GO
CREATE TABLE [dbo].[Commande] (
    [Id_Commande]   INT      IDENTITY (1, 1) NOT NULL,
    [Date_Commande] DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Commande] ASC)
);


GO
PRINT N'Creating Table [dbo].[Image]...';


GO
CREATE TABLE [dbo].[Image] (
    [Id_Image]   INT            IDENTITY (1, 1) NOT NULL,
    [Nom_Image]  NVARCHAR (100) NOT NULL,
    [Url]        NVARCHAR (100) NOT NULL,
    [Id_Produit] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Image] ASC)
);


GO
PRINT N'Creating Table [dbo].[Panier]...';


GO
CREATE TABLE [dbo].[Panier] (
    [Id_Panier]   INT IDENTITY (1, 1) NOT NULL,
    [Quantite]    INT NOT NULL,
    [Id_Produit]  INT NOT NULL,
    [Id_Commande] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Panier] ASC)
);


GO
PRINT N'Creating Table [dbo].[Produit]...';


GO
CREATE TABLE [dbo].[Produit] (
    [Id_Produit]   INT            IDENTITY (1, 1) NOT NULL,
    [Nom_Produit]  NVARCHAR (100) NOT NULL,
    [Description]  NVARCHAR (500) NOT NULL,
    [Prix]         MONEY          NOT NULL,
    [EcoScore]     NCHAR (10)     NOT NULL,
    [Id_Categorie] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Produit] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Image_ToProduit]...';


GO
ALTER TABLE [dbo].[Image]
    ADD CONSTRAINT [FK_Image_ToProduit] FOREIGN KEY ([Id_Produit]) REFERENCES [dbo].[Produit] ([Id_Produit]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Panier_ToProduit]...';


GO
ALTER TABLE [dbo].[Panier]
    ADD CONSTRAINT [FK_Panier_ToProduit] FOREIGN KEY ([Id_Produit]) REFERENCES [dbo].[Produit] ([Id_Produit]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Produit_ToCategorie]...';


GO
ALTER TABLE [dbo].[Produit]
    ADD CONSTRAINT [FK_Produit_ToCategorie] FOREIGN KEY ([Id_Categorie]) REFERENCES [dbo].[Categorie] ([Id_Categorie]);


GO
PRINT N'Creating Procedure [dbo].[SP_Categorie_Delete]...';


GO
CREATE PROCEDURE [dbo].[SP_Categorie_Delete]
	@id_categorie INT
AS
	DELETE FROM [Categorie]
		WHERE [Id_Categorie] = @id_categorie
GO
PRINT N'Creating Procedure [dbo].[SP_Categorie_GetAll]...';


GO
CREATE PROCEDURE [dbo].[SP_Categorie_GetAll]
AS
	SELECT [Id_Categorie],
	[Produit_Categorie]
	FROM [Categorie]
GO
PRINT N'Creating Procedure [dbo].[SP_Categorie_GetById]...';


GO
CREATE PROCEDURE [dbo].[SP_Categorie_GetById]
	@id_categorie INT
AS
	SELECT [Id_Categorie],
	[Produit_Categorie]
	FROM [Categorie]
	WHERE [Id_Categorie] = @id_categorie
GO
PRINT N'Creating Procedure [dbo].[SP_Categorie_Insert]...';


GO
CREATE PROCEDURE [dbo].[SP_Categorie_Insert]
	@produit_categorie NVARCHAR(50)
AS
	INSERT INTO [Categorie] ([Produit_Categorie])
	OUTPUT [inserted].Id_Categorie
	VALUES (@produit_categorie)


    --code a essayer pour ajouter des categories mais voir avant si cela ne bloque pas la publication de la db

	-- CREATE PROCEDURE [dbo].[SP_Categorie_Insert]
    --@Nom_Categorie NVARCHAR(50)
--AS
--BEGIN
    -- Vérifiez si la catégorie existe déjà
    --IF NOT EXISTS (SELECT 1 FROM Categorie WHERE Produit_Categorie = @Nom_Categorie)
    --BEGIN
        -- Si la catégorie n'existe pas, insérez-la
        --INSERT INTO [Categorie]([Produit_Categorie])
        --VALUES (@Nom_Categorie)
    --END
    --END
GO
PRINT N'Creating Procedure [dbo].[SP_Categorie_Update]...';


GO
CREATE PROCEDURE [dbo].[SP_Categorie_Update]
	@id_categorie INT,
	@produit_categorie NVARCHAR(50)
AS
	UPDATE [Categorie]
		SET [Id_Categorie] = @id_categorie ,
			[Produit_Categorie] = @produit_categorie
		WHERE [Id_Categorie] = @id_categorie
GO
PRINT N'Creating Procedure [dbo].[SP_Comande_Delete]...';


GO
CREATE PROCEDURE [dbo].[SP_Comande_Delete]
	@id_commande INT
AS
	DELETE FROM [Commande]
		WHERE [Id_Commande] = @id_commande
GO
PRINT N'Creating Procedure [dbo].[SP_Commande_GetAll]...';


GO
CREATE PROCEDURE [dbo].[SP_Commande_GetAll]
AS
	SELECT	[Id_Commande],
			[Date_Commande]
		FROM [Commande]
GO
PRINT N'Creating Procedure [dbo].[SP_Commande_GetById]...';


GO
CREATE PROCEDURE [dbo].[SP_Commande_GetById]
	@id_commande INT
AS
	SELECT	[Id_Commande],
			[Date_Commande]
		FROM [Commande]
		WHERE [Id_Commande] = @id_commande
GO
PRINT N'Creating Procedure [dbo].[SP_Commande_Insert]...';


GO
CREATE PROCEDURE [dbo].[SP_Commande_Insert]
	@date_commande DATETIME
AS
	INSERT INTO [Commande] ([Date_Commande])
		OUTPUT [inserted].[Id_Commande]
		VALUES (@date_commande)
GO
PRINT N'Creating Procedure [dbo].[SP_Commande_Update]...';


GO
CREATE PROCEDURE [dbo].[SP_Commande_Update]
	@id_commande INT,
	@date_commande DATETIME
AS
	UPDATE [Commande]
		SET [Date_Commande] = @date_commande
		WHERE [Id_Commande] = @id_commande
GO
PRINT N'Creating Procedure [dbo].[SP_Image_Delete]...';


GO
CREATE PROCEDURE [dbo].[SP_Image_Delete]
	@id_image INT,
	@nom_image NVARCHAR(100),
	@url NVARCHAR(100),
	@id_produit INT
AS
	DELETE FROM [Image]
		WHERE [Id_Image] = @id_image
GO
PRINT N'Creating Procedure [dbo].[SP_Image_GetAll]...';


GO
CREATE PROCEDURE [dbo].[SP_Image_GetAll]
AS
	SELECT [Id_Image],
	[Nom_Image],
	[Url],
	[Id_Produit]
	FROM [Image]
GO
PRINT N'Creating Procedure [dbo].[SP_Image_GetById]...';


GO
CREATE PROCEDURE [dbo].[SP_Image_GetById]
	@id_image INT
AS
	SELECT [Id_Image],
	[Nom_Image],
	[Url],
	[Id_Produit]
	FROM [Image]
	WHERE [Id_Image] = @id_image
GO
PRINT N'Creating Procedure [dbo].[SP_Image_Insert]...';


GO
CREATE PROCEDURE [dbo].[SP_Image_Insert]
	@nom_image NVARCHAR(100),
	@url NVARCHAR(100),
	@id_produit INT
AS
	INSERT INTO [Image]([Nom_Image], [Url], [Id_Produit])
		OUTPUT [inserted].[Id_Image]
		VALUES (@nom_image, @url, @id_produit)
GO
PRINT N'Creating Procedure [dbo].[SP_Image_Update]...';


GO
CREATE PROCEDURE [dbo].[SP_Image_Update]
	@id_image INT,
	@nom_image NVARCHAR(100),
	@url NVARCHAR(100),
	@id_produit INT
AS
	UPDATE [Image]
		SET [Nom_Image] = @nom_image ,
			[Url] = @url ,
			[Id_Produit] = @id_produit
		WHERE [Id_Image] = @id_image
GO
PRINT N'Creating Procedure [dbo].[SP_Panier_Delete]...';


GO
CREATE PROCEDURE [dbo].[SP_Panier_Delete]
	@id_panier INT
AS
	DELETE FROM [Panier]
		WHERE [Id_Panier] = @id_panier
GO
PRINT N'Creating Procedure [dbo].[SP_Panier_GetAll]...';


GO
CREATE PROCEDURE [dbo].[SP_Panier_GetAll]
AS
	SELECT	[Id_Panier],
			[Quantite],
			[Id_Produit],
			[Id_Commande]
	FROM [Panier]
GO
PRINT N'Creating Procedure [dbo].[SP_Panier_GetById]...';


GO
CREATE PROCEDURE [dbo].[SP_Panier_GetById]
	@id_panier INT
AS
	SELECT	[Id_Panier],
			[Quantite],
			[Id_Produit],
			[Id_Commande]
		FROM [Panier]
		WHERE [Id_Panier] = @id_panier
GO
PRINT N'Creating Procedure [dbo].[SP_Panier_Insert]...';


GO
CREATE PROCEDURE [dbo].[SP_Panier_Insert]
	@quantite INT,
	@id_produit INT,
	@id_commande INT
AS
	INSERT INTO [Panier] ([Quantite], [Id_Produit], [Id_Commande])
		OUTPUT [inserted].[Id_Panier]
		VALUES (@quantite, @id_produit, @id_commande)
GO
PRINT N'Creating Procedure [dbo].[SP_Panier_Update]...';


GO
CREATE PROCEDURE [dbo].[SP_Panier_Update]
	@id_panier INT,
	@quantite INT,
	@id_produit INT,
	@id_commande INT
AS
	UPDATE [Panier]
		SET [Quantite] = @quantite ,
			[Id_Produit] = @id_produit ,
			[Id_Commande] = @id_commande
		WHERE [Id_Panier] = @id_panier
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_Delete]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_Delete]
	@id_produit INT
AS
	DELETE FROM [Produit]
		WHERE [Id_Produit] = @id_produit
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_GetAll]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_GetAll]
AS
	SELECT [Id_Produit],
	[Nom_Produit],
	[Description],
	[Prix],
	[EcoScore],
	[Id_Categorie]
	FROM [Produit]
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_GetById]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_GetById]
	@id_produit INT
AS
	SELECT	[Id_Produit],
			[Nom_Produit],
			[Description],
			[Prix],
			[EcoScore],
			[Id_Categorie]
		FROM [Produit]
		WHERE [Id_Produit] = @id_produit
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_Insert]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_Insert]
	@nom_produit NVARCHAR(100),
	@description NVARCHAR(500),
	@prix DECIMAL,
	@ecoscore NVARCHAR(10),
	@id_categorie INT
AS
	INSERT INTO [Produit] ([Nom_Produit], [Description], [Prix], [EcoScore], [Id_Categorie])
		OUTPUT [inserted].[Id_Produit]
		VALUES (@nom_produit, @description, @prix, @ecoscore, @id_categorie)
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_Update]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_Update]
	@id_produit INT,
	@nom_produit NVARCHAR(100),
	@description NVARCHAR(500),
	@prix DECIMAL,
	@ecoscore NVARCHAR(10),
	@id_categorie INT
AS
	UPDATE [Produit]
		SET [Id_Produit] = @id_produit ,
			[Nom_Produit] = @nom_produit ,
			[Description] = @description ,
			[Prix] = @prix ,
			[EcoScore] = @ecoscore ,
			[Id_Categorie] = @id_categorie
		WHERE [Id_Produit] = @id_produit
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7d054a02-d0a3-4583-93a2-8e366dedd698')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7d054a02-d0a3-4583-93a2-8e366dedd698')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4f88caf9-36fc-4e40-8365-33a3fdddec25')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4f88caf9-36fc-4e40-8365-33a3fdddec25')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7ca36c04-c1f9-4f69-8028-051e002b0c28')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7ca36c04-c1f9-4f69-8028-051e002b0c28')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '81b619ba-e4cf-4fea-954d-25fd55568c83')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('81b619ba-e4cf-4fea-954d-25fd55568c83')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a5797b57-1409-4df2-bd79-be0702e3247b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a5797b57-1409-4df2-bd79-be0702e3247b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2dfabba1-010c-41f2-bc36-c76728e8f392')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2dfabba1-010c-41f2-bc36-c76728e8f392')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
