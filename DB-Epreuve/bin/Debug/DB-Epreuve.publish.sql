/*
Deployment script for DB_Epreuve

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB_Epreuve"
:setvar DefaultFilePrefix "DB_Epreuve"
:setvar DefaultDataPath "C:\Users\m.gitton\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\m.gitton\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Image].[Image_Url] is being dropped, data loss could occur.

The column [dbo].[Image].[Url] on table [dbo].[Image] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Image])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key 7d054a02-d0a3-4583-93a2-8e366dedd698 is skipped, element [dbo].[Categorie].[Id] (SqlSimpleColumn) will not be renamed to Id_Categorie';


GO
PRINT N'Rename refactoring operation with key 4f88caf9-36fc-4e40-8365-33a3fdddec25 is skipped, element [dbo].[Image].[Id] (SqlSimpleColumn) will not be renamed to Id_Image';


GO
PRINT N'Rename refactoring operation with key 7ca36c04-c1f9-4f69-8028-051e002b0c28 is skipped, element [dbo].[Produit].[Id] (SqlSimpleColumn) will not be renamed to Id_Produit';


GO
PRINT N'Rename refactoring operation with key 81b619ba-e4cf-4fea-954d-25fd55568c83 is skipped, element [dbo].[Panier].[Id] (SqlSimpleColumn) will not be renamed to Id_Panier';


GO
PRINT N'Rename refactoring operation with key a5797b57-1409-4df2-bd79-be0702e3247b, 2dfabba1-010c-41f2-bc36-c76728e8f392 is skipped, element [dbo].[Commande].[Id] (SqlSimpleColumn) will not be renamed to Id_Commande';


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Image_ToProduit]...';


GO
ALTER TABLE [dbo].[Image] DROP CONSTRAINT [FK_Image_ToProduit];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Ajout_ToProduit]...';


GO
ALTER TABLE [dbo].[Panier] DROP CONSTRAINT [FK_Ajout_ToProduit];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Panier_ToCommande]...';


GO
ALTER TABLE [dbo].[Panier] DROP CONSTRAINT [FK_Panier_ToCommande];


GO
PRINT N'Starting rebuilding table [dbo].[Image]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Image] (
    [Id_Image]   INT            NOT NULL,
    [Nom_Image]  NVARCHAR (100) NOT NULL,
    [Url]        NVARCHAR (100) NOT NULL,
    [Id_Produit] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Image] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Image])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Image] ([Id_Image], [Nom_image], [Id_Produit])
        SELECT   [Id_Image],
                 [Nom_image],
                 [Id_Produit]
        FROM     [dbo].[Image]
        ORDER BY [Id_Image] ASC;
    END

DROP TABLE [dbo].[Image];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Image]', N'Image';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Table [dbo].[Produit]...';


GO
ALTER TABLE [dbo].[Produit] ALTER COLUMN [Nom_Produit] NVARCHAR (100) NOT NULL;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Image_ToProduit]...';


GO
ALTER TABLE [dbo].[Image] WITH NOCHECK
    ADD CONSTRAINT [FK_Image_ToProduit] FOREIGN KEY ([Id_Produit]) REFERENCES [dbo].[Produit] ([Id_Produit]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Panier_ToProduit]...';


GO
ALTER TABLE [dbo].[Panier] WITH NOCHECK
    ADD CONSTRAINT [FK_Panier_ToProduit] FOREIGN KEY ([Id_Produit]) REFERENCES [dbo].[Produit] ([Id_Produit]);


GO
PRINT N'Altering Procedure [dbo].[SP_Image_Delete]...';


GO
ALTER PROCEDURE [dbo].[SP_Image_Delete]
	@id_image INT,
	@nom_image NVARCHAR(100),
	@url NVARCHAR(100),
	@id_produit INT
AS
	DELETE FROM [Image]
		WHERE [Id_Image] = @id_image
GO
PRINT N'Altering Procedure [dbo].[SP_Image_GetAll]...';


GO
ALTER PROCEDURE [dbo].[SP_Image_GetAll]
AS
	SELECT [Id_Image],
	[Nom_Image],
	[Url],
	[Id_Produit]
	FROM [Image]
GO
PRINT N'Altering Procedure [dbo].[SP_Image_GetById]...';


GO
ALTER PROCEDURE [dbo].[SP_Image_GetById]
	@id_image INT
AS
	SELECT [Id_Image],
	[Nom_Image],
	[Url],
	[Id_Produit]
	FROM [Image]
	WHERE [Id_Image] = @id_image
GO
PRINT N'Altering Procedure [dbo].[SP_Image_Insert]...';


GO
ALTER PROCEDURE [dbo].[SP_Image_Insert]
	@nom_image NVARCHAR(100),
	@url NVARCHAR(100),
	@id_produit INT
AS
	INSERT INTO [Image]([Nom_Image], [Url], [Id_Produit])
		OUTPUT [inserted].[Id_Image]
		VALUES (@nom_image, @url, @id_produit)
GO
PRINT N'Altering Procedure [dbo].[SP_Image_Update]...';


GO
ALTER PROCEDURE [dbo].[SP_Image_Update]
	@id_image INT,
	@nom_image NVARCHAR(100),
	@url NVARCHAR(100),
	@id_produit INT
AS
	UPDATE [Image]
		SET [Nom_Image] = @nom_image ,
			[Url] = @url ,
			[Id_Produit] = @id_produit
		WHERE [Id_Image] = @id_image
GO
PRINT N'Altering Procedure [dbo].[SP_Categorie_Insert]...';


GO
ALTER PROCEDURE [dbo].[SP_Categorie_Insert]
	@produit_categorie NVARCHAR(50)
AS
	INSERT INTO [Categorie] ([Produit_Categorie])
	OUTPUT [inserted].Id_Categorie
	VALUES (@produit_categorie)


    --code a essayer pour ajouter des categories mais voir avant si cela ne bloque pas la publication de la db

	-- CREATE PROCEDURE [dbo].[SP_Categorie_Insert]
    --@Nom_Categorie NVARCHAR(50)
--AS
--BEGIN
    -- Vérifiez si la catégorie existe déjà
    --IF NOT EXISTS (SELECT 1 FROM Categorie WHERE Produit_Categorie = @Nom_Categorie)
    --BEGIN
        -- Si la catégorie n'existe pas, insérez-la
        --INSERT INTO [Categorie]([Produit_Categorie])
        --VALUES (@Nom_Categorie)
    --END
    --END
GO
PRINT N'Altering Procedure [dbo].[SP_Categorie_Update]...';


GO
ALTER PROCEDURE [dbo].[SP_Categorie_Update]
	@id_categorie INT,
	@produit_categorie NVARCHAR(50)
AS
	UPDATE [Categorie]
		SET [Id_Categorie] = @id_categorie ,
			[Produit_Categorie] = @produit_categorie
		WHERE [Id_Categorie] = @id_categorie
GO
PRINT N'Creating Procedure [dbo].[SP_Comande_Delete]...';


GO
CREATE PROCEDURE [dbo].[SP_Comande_Delete]
	@id_commande INT
AS
	DELETE FROM [Commande]
		WHERE [Id_Commande] = @id_commande
GO
PRINT N'Creating Procedure [dbo].[SP_Commande_GetAll]...';


GO
CREATE PROCEDURE [dbo].[SP_Commande_GetAll]
AS
	SELECT	[Id_Commande],
			[Date_Commande]
		FROM [Commande]
GO
PRINT N'Creating Procedure [dbo].[SP_Panier_Insert]...';


GO
CREATE PROCEDURE [dbo].[SP_Panier_Insert]
	@quantite INT,
	@id_produit INT,
	@id_commande INT
AS
	INSERT INTO [Panier] ([Quantite], [Id_Produit], [Id_Commande])
		OUTPUT [inserted].[Id_Panier]
		VALUES (@quantite, @id_produit, @id_commande)
GO
PRINT N'Creating Procedure [dbo].[SP_Panier_Update]...';


GO
CREATE PROCEDURE [dbo].[SP_Panier_Update]
	@id_panier INT,
	@quantite INT,
	@id_produit INT,
	@id_commande INT
AS
	UPDATE [Panier]
		SET [Quantite] = @quantite ,
			[Id_Produit] = @id_produit ,
			[Id_Commande] = @id_commande
		WHERE [Id_Panier] = @id_panier
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_Delete]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_Delete]
	@id_produit INT
AS
	DELETE FROM [Produit]
		WHERE [Id_Produit] = @id_produit
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_GetAll]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_GetAll]
AS
	SELECT [Id_Produit],
	[Nom_Produit],
	[Description],
	[Prix],
	[EcoScore],
	[Id_Categorie]
	FROM [Produit]
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_GetById]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_GetById]
	@id_produit INT
AS
	SELECT	[Id_Produit],
			[Nom_Produit],
			[Description],
			[Prix],
			[EcoScore],
			[Id_Categorie]
		FROM [Produit]
		WHERE [Id_Produit] = @id_produit
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_Insert]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_Insert]
	@nom_produit NVARCHAR(100),
	@description NVARCHAR(500),
	@prix DECIMAL,
	@ecoscore NVARCHAR(10),
	@id_categorie INT
AS
	INSERT INTO [Produit] ([Nom_Produit], [Description], [Prix], [EcoScore], [Id_Categorie])
		OUTPUT [inserted].[Id_Produit]
		VALUES (@nom_produit, @description, @prix, @ecoscore, @id_categorie)
GO
PRINT N'Creating Procedure [dbo].[SP_Produit_Update]...';


GO
CREATE PROCEDURE [dbo].[SP_Produit_Update]
	@id_produit INT,
	@nom_produit NVARCHAR(100),
	@description NVARCHAR(500),
	@prix DECIMAL,
	@ecoscore NVARCHAR(10),
	@id_categorie INT
AS
	UPDATE [Produit]
		SET [Id_Produit] = @id_produit ,
			[Nom_Produit] = @nom_produit ,
			[Description] = @description ,
			[Prix] = @prix ,
			[EcoScore] = @ecoscore ,
			[Id_Categorie] = @id_categorie
		WHERE [Id_Produit] = @id_produit
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7d054a02-d0a3-4583-93a2-8e366dedd698')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7d054a02-d0a3-4583-93a2-8e366dedd698')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4f88caf9-36fc-4e40-8365-33a3fdddec25')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4f88caf9-36fc-4e40-8365-33a3fdddec25')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7ca36c04-c1f9-4f69-8028-051e002b0c28')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7ca36c04-c1f9-4f69-8028-051e002b0c28')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '81b619ba-e4cf-4fea-954d-25fd55568c83')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('81b619ba-e4cf-4fea-954d-25fd55568c83')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a5797b57-1409-4df2-bd79-be0702e3247b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a5797b57-1409-4df2-bd79-be0702e3247b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2dfabba1-010c-41f2-bc36-c76728e8f392')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2dfabba1-010c-41f2-bc36-c76728e8f392')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Image] WITH CHECK CHECK CONSTRAINT [FK_Image_ToProduit];

ALTER TABLE [dbo].[Panier] WITH CHECK CHECK CONSTRAINT [FK_Panier_ToProduit];


GO
PRINT N'Update complete.';


GO
